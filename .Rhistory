geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(label = paste(Accuracy, ":", forestResults$overall['Accuracy'])))
forestResults$overall['Accuracy']
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(label = forestResults$overall['Accuracy']))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 30, label = forestResults$overall['Accuracy']))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 5, label = forestResults$overall['Accuracy']))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 6, label = paste("Accuracy: ",digits(forestResults$overall['Accuracy'],3))
forestResults$overall['Accuracy']
#+scale_fill_gradientn(colors = cols)
plot(cmtree$table, col = cmtree$byClass, main = paste("Decision Tree Confusion Matrix: Accuracy =", round(cmtree$overall['Accuracy'], 4)))
#--------------#--------------#--------------#--------------#--------------#--------------
##--------------#--------------#--------------#--------------#--------------
###--------------#--------------#--------------#--------------
#####--------------#--------------#--------------
######--------------#--------------
########--------------
#--------------
# Extreme Gradient Boosting
#--------------
set.seed(867)
mTrain <- as.matrix(sTrain[,-c(1,58)])
mode(mTrain) = 'numeric'
mTrain.label <- sTrain$classe
levels(mTrain.label) <- 1:length(levels(sTrain$classe))
xgboost <- train(classe ~ ., data = sTrain, method = 'xgbTree')
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 6, label = paste("Accuracy: ",digits(forestResults$overall['Accuracy'],3)))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 6,
label = paste("Accuracy: ",digits(forestResults$overall['Accuracy'],3))))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(data = NULL, x = 5, y = 6,
label = digits(forestResults$overall['Accuracy'],3)))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(x = 5, y = 6,
label = forestResults$overall['Accuracy']))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(x = 5, y = 5.5,
label = forestResults$overall['Accuracy']))
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
plot(TreebyClass)
tree <- rpart(classe ~ ., data = sTrain, method = 'class')
fancyRpartPlot(tree)
printcp(tree, digits = 3)
#Predict using tree
TreeFit <- predict(tree, sTest, type = 'class')
TreeResults <- confusionMatrix(TreeFit, testing$classe)
TreeCM <- as.data.frame(TreeResults$table)
plot(TreeCM)
ggplot()+geom_tile(aes(x=Prediction, y=Reference, fill=Freq),data = TreeCM)+
geom_text(label = TreeCM$Freq)
ggplot(rdf, aes(Class, Measure))+geom_tile(aes(fill=Value))+geom_text(aes(label=digits(Value,3)))+
theme_solarized()+scale_fill_gradientn(colors = cols)
round(forestResults$overall['Accuracy'],4)
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(x = 5, y = 5.5,
label = round(forestResults$overall['Accuracy'],4)))
paste("Accuracy:",round(forestResults$overall['Accuracy'],4))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(x = 5, y = 5.5,
label = paste("Accuracy:",round(forestResults$overall['Accuracy'],4))))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
geom_text(aes(x = 2.5, y = 5.5,
label = paste("Accuracy:",round(forestResults$overall['Accuracy'],4))))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Accuracy:",round(forestResults$overall['Accuracy'],4)))
?ggtitle
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Accuracy:",round(forestResults$overall['Accuracy'],4))) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4))) +
theme(plot.title = element_text(hjust = 0.5, size = 3))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4))) +
theme(plot.title = element_text(hjust = 0.5, size = 12))
?ggtitle
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix") +
theme(plot.title = element_text(hjust = 0.5, size = 12))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
predict.gbm <- function (object, newdata, n.trees, type = "link", single.tree = FALSE, ...) {
if (missing(n.trees)) {
if (object$train.fraction < 1) {
n.trees <- gbm.perf(object, method = "test", plot.it = FALSE)
}
else if (!is.null(object$cv.error)) {
n.trees <- gbm.perf(object, method = "cv", plot.it = FALSE)
}
else {
n.trees <- length(object$train.error)
}
cat(paste("Using", n.trees, "trees...\n"))
gbm::predict.gbm(object, newdata, n.trees, type, single.tree, ...)
}
}
xgb_trcontrol_1 = trainControl(
method = "repeatedcv",
number = 5,
repeats = 1)
xgb <- train(classe ~ ., data = sTrain, method = 'gbm', trControl = xgb_trcontrol_1, verbose = F)
xgb <- xgboost(data = mTrain, label = mTrain.label,
eta = 0.1,
max_depth = 15,
nround=50,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3)
predict(xgb, mTest)
mTest <- as.matrix(sTest[,-c(1,4,58)])
mode(mTest) = 'numeric'
mTest.label <- sTest$classe
levels(mTest.label) <- 1:length(levels(sTest$classe))
levels(mTrain.label) <- 1:length(levels(sTrain$classe))
levels(mTest.label) <- 1:length(levels(sTrain$classe))
levels(mTrain.label) <- 1:length(levels(sTrain$classe))
View(sTrain)
mTest.label <- sTest$classe
levels(mTest.label) <- 1:length(levels(sTrain$classe))
mTest.label <- sTest$classe
levels(mTest.label) <- 1:length(levels(sTrain$classe))
levels(mTest.label) <- 1:length(levels(sTrain$classe))
mTest.label <- sTest$classe
#subset train and test sets by rule above eliminating NA columns
smallerTrain <- smallTrain[,colSums(is.na(smallTrain)) == 0]
smallerTest <- smallTest[,colSums(is.na(smallTest)) == 0]
#get rid of id number which is duplicate of row index
#remove 'classe' variable from test set
sTrain <- smallerTrain[,-1]
sTest <- smallerTest[,-1]
mTest.label <- sTest$classe
levels(mTrain.label) <- 1:length(levels(sTrain$classe))
levels(mTest.label) <- 1:length(levels(sTrain$classe))
predict(xgb, mTest)
xgbResults <- predict(xgb, mTest)
confusionMatrix(xgbResults, mTest.label)
xgbResults
xgbResults <- predict(xgb$finalModel, newdata = sTest)
xgb_trcontrol_1 = trainControl(
method = "repeatedcv",
number = 5,
repeats = 1)
xgb <- train(classe ~ ., data = sTrain, method = 'gbm', trControl = xgb_trcontrol_1, verbose = F)
View(sTrain)
View(smallerTrain)
View(training)
training <- train[inTrain,]
testing <- train[-inTrain,]
nzvs <- nearZeroVar(training, saveMetrics = T)
nzvars <- nzvs[nzvs$nzv==T,0]
smallTrain <- training[,!colnames(training) %in% rownames(nzvars)]
smallTest <- testing[,!colnames(testing) %in% rownames(nzvars)]
smallerTrain <- smallTrain[,colSums(is.na(smallTrain)) == 0]
smallerTest <- smallTest[,colSums(is.na(smallTest)) == 0]
sTrain <- smallerTrain[,-c(1,2,3,4,5,6,7)]
sTest <- smallerTest[,-c(1,2,3,4,5,6,7)]
View(sTrain)
xgb <- train(classe ~ ., data = sTrain, method = 'xgbtree', trControl = xgb_trcontrol_1, verbose = F)
xgb <- train(classe ~ ., data = sTrain, method = 'xgbTree', trControl = xgb_trcontrol_1, verbose = F)
ggplot()+geom_tile(aes(x=Prediction, y=Reference, fill=Freq),data = TreeCM)+
geom_text(label = TreeCM$Freq)
xgbResults <- predict(xgb$finalModel, newdata = sTest)
xgbResults <- predict(xgb$finalModel, newdata = mTest)
confusionMatrix(xgbResults, mTest.label)
confusionMatrix(xgbResults, sTest$classe)
mTrain <- as.matrix(sTrain[,-c(1,4,58)])
mTest <- as.matrix(sTest[,-c(1,4,58)])
mode(mTrain) = 'numeric'
mode(mTest) = 'numeric'
mTrain.label <- sTrain$classe
mTest.label <- sTest$classe
levels(mTrain.label) <- 1:length(levels(sTrain$classe))
levels(mTest.label) <- 1:length(levels(sTrain$classe))
confusionMatrix(xgbResults, mTest[,'mtest.label'])
xtest <- cbind(mTest,mTest.label)
View(xtest)
confusionMatrix(xgbResults, xtest[,'mtest.label'])
confusionMatrix(xgbResults, xtest[,'mTest.label'])
confusionMatrix(xgbResults, mTest.label)
xgb <- train(classe ~ ., data = sTrain, method = 'gbm', trControl = xgb_trcontrol_1, verbose = T)
View(sTrain)
tcm <- as.data.frame(TreeResults$table)
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "orange") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "blue") +
ggtitle(label = paste("Decision Tree Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "green") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "blue") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
xgbResults <- predict(xgb, sTest)
confusionMatrix(xgbResults, mTest.label)
confusionMatrix(xgbResults, sTest$classe)
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
predict(forest, testing)
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
predict(forest, testing)[5]
predict(forest, testing)[1:5]
predict(forest, testing)[1:100]
# load the library
library(caret)
# load the iris dataset
data(iris)
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Species~., data=iris, trControl=train_control, method="nb")
# summarize results
print(model)
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
print(forest)
?sample
sample(predict(forest,testing),5)
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
sample(predict(forest,testing),100)
sample(predict(forest,testing),50)
sdf
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "white", high = "bluegreen") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient_tableau(low = "white", high = "blue") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient_tableau() +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
?scale_fill_gradient_tableau
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient_tableau(palette = "tableau10medium") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient_tableau("blue") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "#132B43", high = "#56B1F7") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(tcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low ="ivory3", high = "palegreen3") +
ggtitle(label = paste("Decision Tree Accuracy:",round(TreeResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient_(low = "lemonchiffon1", high = "chartreuse3") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
ggplot(fcm, aes(Prediction, Reference)) + geom_tile(aes(fill=Freq)) +
geom_text(aes(label=digits(Freq,0))) +
theme_hc()+
scale_fill_gradient(low = "lemonchiffon1", high = "chartreuse3") +
ggtitle(label = paste("Random Forest Accuracy:",round(forestResults$overall['Accuracy'],4)),
subtitle = "Confusion Matrix Plot") +
theme(plot.title = element_text(hjust = 0.5, size = 12),
plot.subtitle = element_text(hjust = 0.5, size = 10))
library(caret)
library(GGally)
library(rpart)
library(rpart.plot)
library(party)
library(RGtk2)
library(rattle)
library(xgboost)
library(formattable)
library(dplyr)
library(tidyr)
library(tibble)
library(ggthemes)
predict(forest,testing)
predict(forest, test)
x <- cbind(test, predict(forest, test))
x
x[,58]
x[,57]
x[,56]
x$`predict(forest, test)`
View(forestCMdf)
